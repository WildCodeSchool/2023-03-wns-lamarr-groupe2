# .github/workflows/staging-client.yml
name: Compile and push client and server images

# Controls when the workflow will run
on:
        # Triggers the workflow on push or pull request events but only for the master branch
        push:
                branches: ["backendTests"]

        # Allows you to run this workflow manually from the Actions tab
        workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
        # This workflow contains a single job called "build"
        build-client:
                # The type of runner that the job will run on
                runs-on: ubuntu-latest

                # Steps represent a sequence of tasks that will be executed as part of the job
                steps:
                        # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
                        - uses: actions/checkout@v2

                        # login with Docker
                        - uses: docker/login-action@v1
                          name: Login to Docker Hub
                          with:
                                  # generate some credentials from Dockerhub and store them into the repo secrets
                                  username: ${{ secrets.DOCKERHUB_USERNAME }}
                                  password: ${{ secrets.DOCKERHUB_TOKEN }}

                        # prepare buildx for docker
                        - uses: docker/setup-buildx-action@v1
                          name: Set up Docker Buildx

                        # build an push the newly created image
                        - uses: docker/build-push-action@v2
                          name: Build and push
                          with:
                                  context: ./frontend
                                  file: ./frontend/Dockerfile
                                  push: true
                                  tags: ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_CLIENT_IMAGE_NAME }}:latest

        build-server:
                # The type of runner that the job will run on
                runs-on: ubuntu-latest

                # Steps represent a sequence of tasks that will be executed as part of the job
                steps:
                        - name: Run backend tests
                          run: cd ./backend
                          npm test

                        # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
                        - uses: actions/checkout@v2

                        # login with Docker
                        - uses: docker/login-action@v1
                          name: Login to Docker Hub
                          with:
                                  # generate some credentials from Dockerhub and store them into the repo secrets
                                  username: ${{ secrets.DOCKERHUB_USERNAME }}
                                  password: ${{ secrets.DOCKERHUB_TOKEN }}

                        # prepare buildx for docker
                        - uses: docker/setup-buildx-action@v1
                          name: Set up Docker Buildx

                        # build an push the newly created image
                        - uses: docker/build-push-action@v2
                          name: Build and push
                          with:
                                  context: ./backend
                                  file: ./backend/Dockerfile
                                  push: true
                                  tags: ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_SERVER_IMAGE_NAME }}:latest

        send_redeploy_webhook:
                needs:
                        - build-client
                        - build-server
                runs-on: ubuntu-latest

                steps:
                        - name: Checkout code
                          uses: actions/checkout@v2

                        - name: Send Webhook
                          env:
                                  WEBHOOK_URL: ${{ secrets.WEBHOOK_URL }} # Define the webhook URL as a secret in your repository
                          run: |
                                  curl -X POST -H "Content-Type: application/json" -d '{
                                    "repository": "${{ github.repository }}",
                                    "ref": "${{ github.ref }}",
                                    "commits": ${{ toJson(github.event.commits) }}
                                  }' $WEBHOOK_URL
